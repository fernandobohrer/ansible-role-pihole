---
- name: Get the primary group associated with the ansible_user
  ansible.builtin.command: getent group {{ ansible_user }}
  register: pihole__ansible_user_group
  changed_when: false

- name: Get the uid associated with the ansible_user
  ansible.builtin.command: id -u {{ ansible_user }}
  register: pihole__ansible_user_uid
  changed_when: false

- name: Get the gid associated with the ansible_user primary group
  ansible.builtin.command: id -g {{ pihole__ansible_user_group.stdout.split(':')[0] }}
  register: pihole__ansible_user_gid
  changed_when: false

- name: Set required facts
  ansible.builtin.set_fact:
    pihole__uid: "{{ pihole__ansible_user_uid.stdout }}"
    pihole__gid: "{{ pihole__ansible_user_gid.stdout }}"
    pihole__deployment_group: "{{ pihole__ansible_user_group.stdout.split(':')[0] }}"

# If the role configuration directory exists and the role placeholder file
# doesn't, the cleanup process is triggered so that a fresh configuration is executed.

- name: Check if the ansible role configuration directory exists
  ansible.builtin.stat:
    path: "{{ __pihole__ansible_role_conf_dir }}"
  register: pihole__ansible_role_conf_dir

- name: Check if the ansible role placeholder file exists
  ansible.builtin.stat:
    path: "{{ __pihole__ansible_role_placeholder_file }}"
  register: pihole__ansible_role_placeholder_file

- name: Execute the cleanup process
  ansible.builtin.import_tasks: cleanup-process.yml
  when: pihole__ansible_role_conf_dir.stat.exists and not pihole__ansible_role_placeholder_file.stat.exists

# The make package is installed on the target system so that the
# make command can be used to start and stop the container if required.

- name: Ensure role dependencies are installed
  ansible.builtin.apt:
    name: "{{ __pihole__role_dependencies }}"
    state: present
    update_cache: true
    cache_valid_time: "{{ apt_cache_valid_time }}"

# The tasks below create the required directories and deploy the required files.

- name: Ensure ansible role configuration directory exists
  ansible.builtin.file:
    path: "{{ __pihole__ansible_role_conf_dir }}"
    state: directory
    owner: root
    group: root
    mode: "755"

- name: Ensure deployment directory exists
  ansible.builtin.file:
    path: "{{ pihole__deployment_directory }}"
    state: directory
    owner: "{{ pihole__deployment_user }}"
    group: "{{ pihole__deployment_group }}"
    mode: "755"

- name: Deploy templates
  ansible.builtin.template:
    src: "{{ item.source }}"
    dest: "{{ item.destination }}"
    owner: "{{ pihole__deployment_user }}"
    group: "{{ pihole__deployment_group }}"
    mode: "644"
    backup: false
  with_items:
    - { source: makefile.j2, destination: "{{ pihole__deployment_directory }}/makefile" }
    - { source: docker-compose.yml.j2, destination: "{{ pihole__deployment_directory }}/docker-compose.yml" }
    - { source: pihole.env.j2, destination: "{{ pihole__deployment_directory }}/{{ __pihole__container_env_file }}" }

- name: Deploy service templates
  ansible.builtin.template:
    src: "{{ item.source }}"
    dest: "{{ item.destination }}"
    owner: root
    group: root
    mode: "644"
    backup: false
  with_items:
    - { source: pihole-update-gravity.timer.j2, destination: /etc/systemd/system/pihole-update-gravity.timer }
    - { source: pihole-update-gravity.service.j2, destination: /etc/systemd/system/pihole-update-gravity.service }
  notify: Restart pihole-update-gravity.timer

# The tasks below check if pihole's initial configuration was
# already executed and trigger the configuration process if necessary.

- name: Check if the pihole initial configuration was already executed
  ansible.builtin.stat:
    path: "{{ __pihole__ansible_role_placeholder_file }}"
  register: pihole__initial_configuration

- name: Execute the pihole initial configuration
  ansible.builtin.import_tasks: initial-configuration.yml
  when: not pihole__initial_configuration.stat.exists

# Finally we ensure that the container is up and running.

- name: Ensure pihole container is started
  community.docker.docker_compose_v2:
    project_src: "{{ pihole__deployment_directory }}"
    env_files: "{{ __pihole__container_env_file }}"
    project_name: "{{ pihole__container_name }}"
    remove_orphans: true
    state: present
