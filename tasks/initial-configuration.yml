---
- name: Ensure pihole container is started
  community.docker.docker_compose_v2:
    project_src: "{{ pihole__deployment_directory }}"
    env_files: "{{ __pihole__container_env_file }}"
    project_name: "{{ pihole__container_name }}"
    remove_orphans: true
    state: present
    wait: true
    wait_timeout: 300

- name: Identify pihole's randomly generated web console password
  no_log: true
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      docker container logs {{ pihole__container_name }} | grep random | awk -F : '{print $2}' | sed 's/ //g'
  register: pihole__web_password
  changed_when: false
  failed_when: pihole__web_password.stdout | length == 0

- name: Persist pihole's randomly generated web console password on disk
  no_log: true
  ansible.builtin.lineinfile:
    path: "{{ __pihole__ansible_role_conf_dir }}/pihole-web-password.txt"
    line: "{{ pihole__web_password.stdout }}"
    create: true
    owner: root
    group: root
    mode: "600"

- name: Add extra packages to the pihole container
  community.docker.docker_container_exec:
    container: "{{ pihole__container_name }}"
    command: apk add {{ item }}
    timeout: 60
  with_items: "{{ __pihole__additional_packages }}"

# Run "pihole updateGravity" so that the pihole sqlite database gets created:

- name: Run pihole updateGravity
  community.docker.docker_container_exec:
    container: "{{ pihole__container_name }}"
    command: "pihole updateGravity"
    timeout: 300

# Now that the pihole sqlite database exists, add extra blocklists to it:

- name: Download the Big Blocklist Collection from firebog.net
  ansible.builtin.uri:
    url: "{{ __pihole__firebog_blocklist_collection }}"
    return_content: true
  register: pihole__firebog_blocklist
  failed_when: pihole__firebog_blocklist.status != 200 or 'https' not in pihole__firebog_blocklist.content

- name: Add extra blocklists to pihole
  community.docker.docker_container_exec:
    container: "{{ pihole__container_name }}"
    command: sqlite3 /etc/pihole/gravity.db "BEGIN TRANSACTION; INSERT INTO adlist (address, enabled) VALUES ('{{ item }}', 1); COMMIT;"
    timeout: 60
  with_items: "{{ pihole__firebog_blocklist.content | split('\n') | select('search', 'https') }}"

# If additional blocklists were specified by the user, add them to pihole

- name: Add user blocklists to pihole
  community.docker.docker_container_exec:
    container: "{{ pihole__container_name }}"
    command: sqlite3 /etc/pihole/gravity.db "BEGIN TRANSACTION; INSERT INTO adlist (address, enabled) VALUES ('{{ item }}', 1); COMMIT;"
    timeout: 60
  with_items: "{{ pihole__user_blocklists }}"
  when: pihole__user_blocklists | length > 0

# Now that extra blocklists were added to the pihole sqlite database, run "pihole updateGravity" to get the lists' contents:

- name: Run pihole updateGravity
  community.docker.docker_container_exec:
    container: "{{ pihole__container_name }}"
    command: "pihole updateGravity"
    timeout: 300

# Now that the pihole setup is complete, flush logs and information that was gathered during the preparation process:

- name: Pause for 10 seconds to build the application cache
  ansible.builtin.pause:
    seconds: 10

- name: Run pihole flush
  community.docker.docker_container_exec:
    container: "{{ pihole__container_name }}"
    command: "pihole flush >/dev/null 2>&1"
    timeout: 300

# Create a placeholder file to prevent the above tasks from running again:

- name: Create a placeholder file that will prevent the above tasks from running again
  vars:
    task_details: Mark the initial pihole configuration as done
  ansible.builtin.template:
    src: role-placeholder-file.j2
    dest: "{{ __pihole__ansible_role_placeholder_file }}"
    owner: root
    group: root
    mode: "644"
