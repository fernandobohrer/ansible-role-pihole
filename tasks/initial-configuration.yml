---
# Since this is the first execution of the container, start and
# stop it so that the basic operational folders and files get created.
# After the start of the container and before the container is
# stopped, persist the automatically generated web console password on disk.

- name: Ensure pihole container is started
  community.docker.docker_compose_v2:
    project_src: "{{ deployment_directory }}"
    env_files: "{{ __container_environment_file }}"
    project_name: "{{ container_name }}"
    remove_orphans: true
    state: present

- name: Identify pihole's randomly generated web console password
  no_log: true
  ansible.builtin.shell:
    cmd: |
      docker container logs {{ container_name }} | grep random | awk -F : '{print $2}' | sed 's/ //g'
  register: pihole_web_password
  changed_when: false

- name: Persist pihole's randomly generated web console password on disk
  no_log: true
  ansible.builtin.lineinfile:
    path: "{{ __ansible_role_conf_dir }}/pihole-web-password.txt"
    line: "{{ pihole_web_password.stdout }}"
    create: true
    owner: root
    group: root
    mode: "600"

- name: Ensure pihole container is stopped
  community.docker.docker_compose_v2:
    project_src: "{{ deployment_directory }}"
    env_files: "{{ __container_environment_file }}"
    project_name: "{{ container_name }}"
    remove_orphans: true
    state: absent

# Disable pihole rate limit functionality.

- name: Disable pihole rate limit functionality
  ansible.builtin.lineinfile:
    path: "{{ __pihole_ftl_file }}"
    regexp: "^RATE_LIMIT="
    line: RATE_LIMIT=0/0

# Apply pihole dnsmasq custom settings.

- name: Apply custom pihole settings
  ansible.builtin.lineinfile:
    path: "{{ __pihole_custom_settings_file }}"
    regexp: "^{{ item }}"
    line: "{{ item }}"
    create: true
    owner: root
    group: root
    mode: "644"
  with_items:
    - "{{ pihole_dnsmasq_custom_settings }}"

# Start the container and run pihole update
# gravity so that the pihole sqlite database gets created.

- name: Ensure pihole container is started
  community.docker.docker_compose_v2:
    project_src: "{{ deployment_directory }}"
    env_files: "{{ __container_environment_file }}"
    project_name: "{{ container_name }}"
    remove_orphans: true
    state: present

- name: Run pihole update gravity
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: "pihole updateGravity"
    timeout: 300

# Now that the pihole sqlite database exists, add additional blocklists to it.

- name: Download the Big Blocklist Collection from firebog.net
  ansible.builtin.uri:
    url: "{{ __firebog_blocklist_collection }}"
    return_content: true
  register: firebog_blocklist
  failed_when: firebog_blocklist.status != 200 or 'https' not in firebog_blocklist.content

- name: Add additional blocklists to pihole
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: sqlite3 /etc/pihole/gravity.db "INSERT INTO adlist (address, enabled) VALUES ('{{ item }}', 1);"
    timeout: 30
  with_items: "{{ firebog_blocklist.content | split('\n') | select('search', 'https') }}"

# Now that additional blocklists were added to the pihole
# sqlite database, run update gravity to get the lists contents.

- name: Run pihole update gravity
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: "pihole updateGravity"
    timeout: 300

# Now that the preparation is complete, flush logs and
# information that was gathered during the preparation process.

- name: Pause for 10 seconds to build the application cache
  ansible.builtin.pause:
    seconds: 10

- name: Run pihole flush
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: "pihole flush >/dev/null 2>&1"
    timeout: 300

# Create a placeholder file that will prevent the above tasks from running again.

- name: Create a placeholder file that will prevent the above tasks from running again
  vars:
    task_details: Mark the initial pihole configuration as done
  ansible.builtin.template:
    src: role-placeholder-file.j2
    dest: "{{ __ansible_role_placeholder_file }}"
    owner: root
    group: root
    mode: "644"
